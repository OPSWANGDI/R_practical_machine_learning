## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+sin(hp))
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
mtcars2<-mtcars1 %>% transform(hp=hp^2)
mdl3<-lm(data = mtcars2, formula = mpg~am+cyl+disp+drat+wt+hp)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
View(mtcars2)
View(mtcars1)
mtcars2<-mtcars1 %>% transform(hp=hp^0.5)
mdl3<-lm(data = mtcars2, formula = mpg~am+cyl+disp+drat+wt+hp)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
mtcars2<-mtcars1 %>% transform(hp=1/hp)
mdl3<-lm(data = mtcars2, formula = mpg~am+cyl+disp+drat+wt+hp)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
## Direct LM
mdl<-lm(data = mtcars1,formula = mpg~am)
## Diagnosetics
summary(mdl)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl)
library(datasets)
data(mtcars)
library(dplyr)
mtcars1<-transform(mtcars, vs=as.factor(vs),am=as.factor(am))
mtcars1$vs<- mtcars$vs %>% sub(pattern = 0,replacement = "V-shaped",) %>% sub(pattern = 1,replacement = "straight") %>% as.factor()
mtcars1$am<- mtcars$am %>% sub(pattern = 0,replacement = "automatic",) %>% sub(pattern = 1,replacement = "manual") %>% as.factor()
str(mtcars1)
## General View
library(ggplot2)
g<-ggplot(data = mtcars1,mapping = aes(x = am,y = mpg,color=am))
g<-g+geom_boxplot()+facet_grid(.~vs)
g<-g+labs(title = "MPG by Transmission",x="Transmission",y="Miles/(US) gallon")
g
## T-test
t.test(y = mtcars1$mpg[mtcars1$am=="automatic"],x = mtcars1$mpg[mtcars1$am=="manual"],alternative = "greater",paired = FALSE,var.equal = FALSE)
step(mdl3)
step(mdl3,direction = "backwards")
step(mdl3,direction = "backward")
mtcars2<-mtcars1 %>% transform(hp=1/hp)
mdl3<-lm(data = mtcars2, formula = mpg~am+cyl+disp+drat+wt+hp)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl2,direction = "backward")
step(mdl3,direction = "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+disp:drat)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3,direction = "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+disp:drat)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3,direction = "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+disp:drat)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
anova(mdl3)
mdl2<-lm(data = mtcars1,formula = mpg~am+cyl+disp+drat+wt)
## Diagnosetics
summary(mdl2)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl2)
anova(mdl2)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+wt+disp:drat)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
anova(mdl3)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+disp:drat)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
anova(mdl3)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+disp:drat)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+disp:drat)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+disp:drat)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3, "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+disp:drat)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3, direction = "backward")
summary(mdl3)
step(mdl3, direction = "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+disp:drat)
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3, direction = "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+sin(disp):sin(drat))
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3, direction = "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log10(disp))
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3, direction = "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log10(disp)+log(drat))
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3, direction = "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log10(disp):log(drat))
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3, direction = "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log10(disp):sin(drat))
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3, direction = "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log10(disp))
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3, direction = "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log(disp))
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3, direction = "backward")
mdl2<-lm(data = mtcars1,formula = mpg~am+cyl+disp+drat+wt)
## Diagnosetics
summary(mdl2)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl2)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log(disp))
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+sin(disp))
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log(disp))
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log(disp))
## Diagnosetics
summary(mdl3)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl3)
step(mdl3, direction = "backward")
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log(disp))
step(mdl3, direction = "backward")
mdl4<-lm(data = mtcars1, formula = mpg ~ am + disp + wt + log(disp)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log(disp))
step(mdl3, direction = "backward")
mdl4<-lm(data = mtcars1, formula = mpg ~ am + disp + wt + log(disp))
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log(disp))
step(mdl3, direction = "backward")
mdl4<-lm(data = mtcars1, formula = mpg ~ am + disp + wt + log(disp))
## Diagnosetics
summary(mdl4)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl4)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log(disp))
step(mdl3, direction = "backward")
mdl4<-lm(data = mtcars1, formula = mpg ~ am + disp + wt + log(disp)-1)
## Diagnosetics
summary(mdl4)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl4)
mdl3<-lm(data = mtcars1, formula = mpg~am+cyl+disp+drat+wt+log(disp))
step(mdl3, direction = "backward")
mdl4<-lm(data = mtcars1, formula = mpg ~ am + disp + wt + log(disp))
## Diagnosetics
summary(mdl4)
## Residuel Plot
par(mfrow=c(2,2))
plot(mdl4)
tp<-1
11/122
library(iris)
install.packages("iris")
install.packages("iris3")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
vowel.train$y<-as.factor(as.character(vowel.train$y))
vowel.test$y<-as.factor(as.character(vowel.test$y))
set.seed(338833)
set.seed(33833)
mdl1<-train(y~.,data=vowel.train,method="rf")
library(caret)
mdl1<-train(y~.,data=vowel.train,method="rf")
mdl2<-train(y~.,data=vowel.train,method="gbm")
call(mdl1)
mdl1
mdl2
teat1<-predict(mdl1,vowel.test)
teat2<-predict(mdl2,vowel.test)
confusionMatrix(teat1,vowel.test$y)
confusionMatrix(teat1,vowel.test$y)$Accurary
confusionMatrix(teat2,vowel.test$y)
confusionMatrix(teat2,teat1)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
View(training)
mdl1<-train(diagnosis~.,data=training,method="rf")
mdl2<-train(diagnosis~.,data=training,method="gbm")
mdl3<-train(diagnosis~.,data=training,method="lda")
pred1<-predict(mdl1,testing)
pred2<-predict(mdl2,testing)
predDF<-data.frame(pred1,pred2,diagnosis=testing$diagnosis)
View(predDF)
cpmbfit<-train(diagnosis~.,data = predDF,method="gam")
combpred<-predict(cpmbfit,predDF)
confusionMatrix(pred1,testing$diagnosis)
confusionMatrix(pred2,testing$diagnosis)
confusionMatrix(pred3,testing$diagnosis)
confusionMatrix(combpred,testing$diagnosis)
pred3<-predict(mdl3,testing)
predDF<-data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
cpmbfit<-train(diagnosis~.,data = predDF,method="gam")
confusionMatrix(pred1,testing$diagnosis)
confusionMatrix(pred2,testing$diagnosis)
confusionMatrix(pred3,testing$diagnosis)
confusionMatrix(combpred,testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?polt.enet
View(training)
train(CompressiveStrength~.,data = training,method="lasso")
mdl<-train(CompressiveStrength~.,data = training,method="lasso")
View(mdl)
mdl
summary(mdl)
mdl$coefnames
mdl$finalModel
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv","gaData.csv")
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
bats(y = training)
summary(training)
str(training)
training$date<-ymd(training$date)
bats(y = training)
str(training)
testing$date<-ymd(testing$date)
View(training)
bats(y = training$visitsTumblr)
forecast(training)
forecast(training$visitsTumblr)
View(testing)
View(training)
forecast(training$visitsTumblr,235)
confusionMatrix(forecast(training$visitsTumblr,235),testing$visitsTumblr)
View(testing)
confusionMatrix(forecast(training$visitsTumblr,235)$Forecast,testing$visitsTumblr)
forecast(training$visitsTumblr,235)$Forecast
a<-forecast(training$visitsTumblr,235)
View(a)
a<-forecast(training$visitsTumblr,235)$mean
confusionMatrix(a,testing$visitsTumblr)
testing$visitsTumblr
b<_testing$visitsTumblr
b<-testing$visitsTumblr
a
a<-forecast(training$visitsTumblr,235)
a
str(a)
-354.6823  693.7156
range1<-range(-354.6823,  693.7156)
range1
testing$visitsTumblr %in% range(-354.6823,  693.7156)
testing$visitsTumblr >-354.6823  & testing$visitsTumblr < 693.7156
sum(testing$visitsTumblr >-354.6823  & testing$visitsTumblr < 693.7156)
205/235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
View(training)
mdl<-svm(CompressiveStrength~.,data = training)
result<-predict(mdl,testing)
confusionMatrix(data = result,reference = testing$CompressiveStrength)
confusionMatrix(result, = testing$CompressiveStrength)
confusionMatrix(result,  testing$CompressiveStrength)
summary(training$CompressiveStrength)
summary(testing$CompressiveStrength)
sqrt(sum((result-testing$CompressiveStrength)^2))
sqrt(mean((result-testing$CompressiveStrength)^2))
sqrt((result-testing$CompressiveStrength)^2/255)
sqrt(sum((result-testing$CompressiveStrength)^2)/255)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
bat(tstrain)
bats(tstrain)
mdl<-bats(tstrain)
tstest<-ts(training$visitsTumblr)
result<-predict(mdl,tstest)
result<-predict(mdl,testing)
result<-forecast(object = mdl,tstest)
result<-forecast(mdl,tstest)
result<-forecast(mdl,testing$visitsTumblr)
result<-forecast(mdl,testing)
result<-forecast(mdl,testing$date)
View(testing)
result<-forecast(mdl,level = 0.95,h = 235)
View(result)
sum(result$lower<testing$visitsTumblr & testing$visitsTumblr > result$upper)
1-9/235
sum(result$lower<testing$visitsTumblr & testing$visitsTumblr < result$upper)
226/235
result@lower
result
setwd("~/Documents/R-review/R-Practical_Machine_Learning")
knitr::opts_chunk$set(echo = TRUE,message = FALSE,error = FALSE,warning = FALSE)
setwd("~/Documents/R-review/R-Practical_Machine_Learning")
url1<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url2<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url1,"training.csv",method="curl")
download.file(url2,"tseting.csv",method="curl")
con<-file(description = "training.csv",open = "r")
data<-readLines(con = con,n = 10)
data
training<-read.csv(file = "training.csv",sep = ",",header = TRUE)
head(training)
testing<-read.csv(file = "testing.csv",sep = ",",header = TRUE)
url1<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url2<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url1,"training.csv",method="curl")
download.file(url2,"testing.csv",method="curl")
training<-read.csv(file = "training.csv",sep = ",",header = TRUE)
testing<-read.csv(file = "testing.csv",sep = ",",header = TRUE)
View(testing)
str(training)
dim(training)
dim(testing)
names(training)
summary(training$classe)
dim(training)
dim(testing)
names(training)
summary(training$classe)
summary(testing$classe)
dim(training)
dim(testing)
names(training)
names(testing)
summary(training$classe)
summary(testing$class)
summary(testing$problem_id)
testing$problem_id
dist<-dist(training)
library(caret)
inBuilt<-createDataPartition(y = training,p = 0.6,list=FALSE )
library(caret)
inBuilt<-createDataPartition(y = training,p = 0.6,list=FALSE )
library(caret)
inBuilt<-createDataPartition(y = training$classe,p = 0.6,list=FALSE )
validation<-training[-inBuilt,]
builtData<-training[inBuilt,]
library(caret)
inBuilt<-createDataPartition(y = training$classe,p = 0.8,list=FALSE )
validation<-training[-inBuilt,]
builtData<-training[inBuilt,]
inTrain<-createDataPartition(y=builtData$classe, p = 0.75, list=FALSE)
train<-inBuilt[inTrain,]
test<-inBuilt[-inTrain,]
library(caret)
inBuilt<-createDataPartition(y = training$classe,p = 0.8,list=FALSE )
validation<-training[-inBuilt,]
builtData<-training[inBuilt,]
inTrain<-createDataPartition(y=builtData$classe, p = 0.75, list=FALSE)
train<-builtData[inTrain,]
test<-builtData[-inTrain,]
names(testing)
hclust(dist)
cluster1<-hclust(dist)
plot(cluster1)
heatmap(cluster1)
heatmap(dist)
heatmap(train)
head(training,3)
names(training)
head(training,3)
summary(training$classe)
is.na(training[1,])
which(is.na(training[1,]))
all(is.na(train[,which(is.na(training[1,]))]))
(is.na(train[,which(is.na(training[1,]))]))
is.na(train[,which(is.na(training[1,]))])
sapply(is.na(train[,which(is.na(training[1,]))]),all)
sapply(is.na(train[,which(is.na(training[1,]))]),sum)
is.na(train[,which(is.na(training[1,]))])
apply(is.na(train[,which(is.na(training[1,]))]),2,sum)
apply(is.na(training[,which(is.na(training[1,]))]),2,sum)<dim(training)[1]
all(apply(is.na(training[,which(is.na(training[1,]))]),2,sum)<dim(training)[1])
all(apply(is.na(train[,which(is.na(train[1,]))]),2,sum)<dim(train)[1])
names(training)
trainobj<-preProcess(train[,-c(1:7,160)], method = "knnImpute")
View(trainobj)
train2<-predict(trainobj,train[,-c(1:7,160)])
install.packages("RANN")
train2<-predict(trainobj,train[,-c(1:7,160)])
View(train2)
View(train)
